# -*- coding: utf-8 -*-
"""
/***************************************************************************
 ReceiveSensorData
                                 A QGIS plugin
 Receive sensor data and tracking
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-09-08
        git sha              : $Format:%H$
        copyright            : (C) 2021 by Y.Kayama/Aeroasahi Corporation
        email                : yoichi.kayama@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication, QTimer
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction


from qgis.core  import QgsTask,QgsApplication

from PyQt5.QtCore import *
from PyQt5.QtWidgets import *
import time
import threading
import urllib.request

import json



# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .ReceiveSensorData_dialog import ReceiveSensorDataDialog
import os.path

from .gui.posiview_properties import PosiviewProperties

from .posiview_project import PosiViewProject

class ReceiveSensorData:
    """QGIS Plugin Implementation."""

    recieveStatus = False
    

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'ReceiveSensorData_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = {}
        self.menu = self.tr(u'&ReceiveSensorData')

        #self.toolbar = self.iface.addToolBar(u'ReceiveSensorData')
        #self.toolbar.setObjectName(u'ReceiveSensorData')


        self.project = PosiViewProject(self.iface)

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

        self.recieveStatus = False

 

        

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('ReceiveSensorData', message)



    def add_action(
        self,
        name,
        icon_path,
        text,
        callback,
        toggle_flag=False,
        enabled_flag=True,
        checkable_flag=False,
        visible_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.
        :param name: Objectname of the action. Serves also as key for the stored actions.
        :type name: str

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param toggle_flag: A flag indicating if the action should connect
            the toggled or triggered signal by default.
            Defaults to triggered (False)
        :type toggle_flag: bool

        :param checkable_flag: A flag indicating if the action should be checkable
            by default. Defaults to False.
        :type checkable: bool

        :param visible_flag: A flag indicating if the action should be displayed
            by default. Defaults to True.
        :type visible: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.setObjectName(name)
        if toggle_flag:
            action.toggled.connect(callback)
        else:
            action.triggered.connect(callback)
        action.setEnabled(enabled_flag)
        action.setCheckable(checkable_flag)
        action.setVisible(visible_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        #if add_to_toolbar:
        #    self.toolbar.addAction(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions[name] = action

        return action

 


    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/ReceiveSensorData/icon.png'

        iconPath = ':/plugins/ReceiveSensorData/'

        self.add_action(
            u'openMenu',
            icon_path,
            text=self.tr(u'&ReceiveSensorData'),
            callback=self.run,
            toggle_flag=False,
            enabled_flag=True,
            checkable_flag=False,
            visible_flag=True,
            add_to_menu=True,
            add_to_toolbar=True,
            status_tip=None,
            whats_this=None,
            parent=self.iface.mainWindow())
      
        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""

        """
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&ReceiveSensorData'),
                action)
            self.iface.removeToolBarIcon(action)
        """
        self.project.stopTracking()
        #self.tracking.removeMobiles()
        #self.tracking.removeProviders()
        self.project.unload()
        #self.iface.mainWindow().statusBar().removeWidget(self.positionDisplay)
        for _, action in self.actions.items():
            self.iface.removePluginMenu(
                self.tr(u'&ReceiveSensorData'),
                action)
        #    self.iface.removeToolBarIcon(action)
        #del self.toolbar

#     @pyqtSlot(bool)
    def startStopTracking(self, checked=False):
        ''' Start or stop the online tracking
        :param checked: decide wether to start or stop tracking
        :type checked: bool
        '''
        if checked:
            self.project.startTracking()
            if self.project.autoRecord:
                self.actions['recordAction'].setChecked(checked)
        else:
            self.project.stopTracking()
            self.actions['recordAction'].setChecked(checked)

    #  start recieve sensor data
    def recievestart(self):
        self.recieveStatus = True
            

    def  newTask( self ):

        url = 'http://localhost:8000/cscs/cscsstat.json'

        req = urllib.request.Request(url)
        with urllib.request.urlopen(req) as res:
             body = res.read()
    #print(body)

             dres = json.loads( body )
             self.iface.messageBar().pushMessage(str(dres["distance"]))
             self.dlg.Text_res.setText( str(dres["distance"]))
        #newtask = SensorReadTask("get sensor data")
        #newtask.setParent( self )
        #QgsApplication.taskManager().addTask(newtask)


    #  stop  recieve sensor data
    def recievestop( self ):
        self.recieveStatus = False

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = ReceiveSensorDataDialog()

            self.dlg.buttonStartStop.clicked.connect(self.sensorget)
            self.dlg.buttonStartStop.setText('センサ取得開始')
            self.timer = QTimer()

            self.timer.timeout.connect(self.newTask)

            #self.task = SensorReadTask("get sensor data")
           # self.task.setiface(self.iface)
            #QgsApplication.taskManager().addTask(self.task)


        

        
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            pass


#     @pyqtSlot(dict)
    def onApplyConfigChanges(self, properties):
        '''Apply the changed configuration to the posiview project. The is done
           by unloading and loading again the project.
        :param properties: project configuration
        :type properties: dict
        '''
        pass
        ''' 
        if self.actions['loadAction'].isChecked():
            track = self.actions['trackingAction'].isChecked()
            record = self.actions['recordAction'].isChecked()
            self.actions['trackingAction'].setChecked(False)
            self.actions['recordAction'].setChecked(False)
            self.tracking.removeMobiles()
            self.tracking.removeProviders()
            self.project.unload()
            self.project.load(properties)
            self.project.store()
            self.recorder.path = self.project.recorderPath
            #self.tracking.setMobiles(self.project.mobileItems)
            self.guidance.setMobiles(self.project.mobileItems)
            self.compass.setMobiles(self.project.mobileItems)
            self.tracking.setProviders(self.project.dataProviders)
            self.recorder.setMobiles(self.project.mobileItems)
            self.actions['trackingAction'].setChecked(track)
            self.actions['recordAction'].setChecked(record)
        '''


    def configure(self):
        '''Execute the configuration dialogue and apply properties if accepted
        '''
        propDlg = PosiviewProperties(self.project, self.iface.mainWindow())
        propDlg.applyChanges.connect(self.onApplyConfigChanges)
        propDlg.exec_()


    def  pushMessage( self, message ):
        self.iface.messageBar().pushMessage(message)

    def sensorget(self):
        #self.iface.messageBar().createMessage('Action', 'Doing Something') 

        if self.recieveStatus:
            self.iface.messageBar().pushMessage('Stop!')
            self.recieveStatus= False
            self.dlg.buttonStartStop.setText('センサ取得開始')
            self.timer.stop() #Set timer interval in milliseconds(Task repeats every 30 seconds)
        else:
            self.iface.messageBar().pushMessage('Start!')
            self.recieveStatus= True
            self.dlg.buttonStartStop.setText('センサ取得中止')
            self.timer.start(3000) #Set timer interval in milliseconds(Task repeats every 30 seconds)



class SensorReadTask(QgsTask):
    """Here we subclass QgsTask"""

   # iface = None

    #xpos = 0.0

   # recievestatus = False

    def setParent( self, Parent):
        self.parent = Parent
        self.iface = self.parent.iface

    def __init__(self, desc):
        QgsTask.__init__(self, desc)

    def  setiface( self, iface ):

        self.iface = iface

    def startthread( self, interval ):

        self.iface.messageBar().pushMessage('Start thread' )


    def run(self):
        """This function is where you do the 'heavy lifting' or implement
        the task which you want to run in a background thread. This function 
        must return True or False and should only interact with the main thread
        via signals"""

        self.parent.pushMessage('sensor get')

        """
        for i in range (21):
            time.sleep(0.25)
            val = i * 5
            #report progress which can be received by the main thread
            self.setProgress(val)
            #check to see if the task has been cancelled
            if self.isCanceled():
                return False
        """
        return True

    def finished(self, result):
        """This function is called automatically when the task is completed and is
        called from the main thread so it is safe to interact with the GUI etc here"""
        if result is False:
            self.iface.messageBar().pushMessage('Task was cancelled', duration=3)
        else:
            self.iface.messageBar().pushMessage('Task Complete', duration=3)


